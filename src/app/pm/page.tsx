"use client";
import * as React from "react";
import { useState, useEffect } from "react";
import "./pm.scss";
import { useRouter } from "next/navigation";

interface IPmForm {
    _id: string;
    pdfName: string;
    uploadBy: string;
    uploadAt: string;
    machine?: Record<string, string>;
    __v: number;
}

interface IMachineCount {
    [key: string]: number;
}

export default function Pm() {
    const [myPdf, setMyPdf] = useState<IPmForm[]>([]);
    const [machineCount, setMachineCount] = useState<IMachineCount>({});
    const router = useRouter();

    useEffect(() => {
        const token = localStorage.getItem("token-nemachine");
        const user = localStorage.getItem("user-nemachine");
        if (!token ||  !user) {
          localStorage.clear();
          router.push("/login");
        }
      }, [router]);
    const fetchData = async () => {
        const token = localStorage.getItem("token-nemachine");
        if (!token) {
            console.error("Token not found in localStorage");
            return;
        }

        try {
            const response = await fetch("http://159.65.216.202:9999/pm/mine", {
                method: "GET",
                headers: {
                    Authorization: `Bearer ${token}`,
                },
            });

            if (!response.ok) {
                throw new Error("Failed to fetch PDF data.");
            }

            const data = await response.json();
            setMyPdf(data.data || []);
            setMachineCount(data.machineCount || {});
        } catch (error) {
            console.error("Error fetching PDFs:", error);
        }
    };

    useEffect(() => {
        fetchData();
    }, []);

    const handleDelete = async (fileName: string) => {
        const token = localStorage.getItem("token-nemachine");
        if (!token) {
            alert("You are not authorized!");
            return;
        }

        const isConfirmed = window.confirm(`‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå "${fileName}" ‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?`);
        if (!isConfirmed) return;

        try {
            const response = await fetch(`http://159.65.216.202:9999/pm/file/${fileName}`, {
                method: "DELETE",
                headers: {
                    Authorization: `Bearer ${token}`,
                },
            });

            if (response.ok) {
                setMyPdf((prevPdf) => prevPdf.filter((pdf) => pdf.pdfName !== fileName));
                alert(`‡πÑ‡∏ü‡∏•‡πå "${fileName}" ‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!`);
                fetchData();
            } else {
                const errorData = await response.json();
                alert(`‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${errorData.message || "Unknown error"}`);
            }
        } catch (error) {
            console.error("Error deleting file:", error);
            alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå");
        }
    };

    const handleOpenPdf = async (pdfName: string) => {
        const token = localStorage.getItem("token-nemachine");
        if (!token) {
            alert("You are not authorized!");
            return;
        }

        try {
            const response = await fetch(`http://159.65.216.202:9999/pm/files/${pdfName}`, {
                method: "GET",
                headers: {
                    Authorization: `Bearer ${token}`,
                },
            });

            if (!response.ok) {
                throw new Error("Failed to fetch PDF file.");
            }

            const blob = await response.blob();
            const pdfUrl = URL.createObjectURL(blob);
            window.open(pdfUrl, "_blank");
        } catch (error) {
            console.error("Error fetching PDF:", error);
            alert("Error opening PDF file.");
        }
    };

    return (
        <div className="container">
            <div className="header">
                <h2> PM Check List</h2>
            </div>

            {/* ‚úÖ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå PDF */}
            <div className="file-list">
                {myPdf.length > 0 ? (
                    <ul>
                        {myPdf.map((pdf) => (
                            <li key={pdf._id} className="file-item">
                                <div className="file-info">
                                    <span className="file-name" onClick={() => handleOpenPdf(pdf.pdfName)}>
                                        üìÇ {pdf.pdfName}
                                    </span>
                                    <div className="file-meta">
                                         {new Date(pdf.uploadAt).toLocaleString()} | üë§ {pdf.uploadBy}
                                    </div>
                                    {/* ‚úÖ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå */}
                                    {pdf.machine && Object.keys(pdf.machine).length > 0 && (
                                        <div className="machine-list">
                                            üè≠ <strong>‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£:</strong>{" "}
                                            {Object.entries(pdf.machine).map(([machine, id]) => (
                                                <span key={id} className="machine-item">
                                                    {machine}
                                                </span>
                                            ))}
                                        </div>
                                    )}
                                </div>
                                <div className="file-actions">
                                    <button className="btn btn-open" onClick={() => handleOpenPdf(pdf.pdfName)}>
                                        ‡πÄ‡∏õ‡∏¥‡∏î
                                    </button>
                                    <button className="btn btn-delete" onClick={() => handleDelete(pdf.pdfName)}>
                                        ‡∏•‡∏ö
                                    </button>
                                </div>
                            </li>
                        ))}
                    </ul>
                ) : (
                    <p>‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå PM Check List</p>
                )}
            </div>

            {/* ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ PM */}
            <div className="machine-count">
                <h3>üìä ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô PM Check List ‡∏ï‡πà‡∏≠‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£</h3>
                {Object.keys(machineCount).length > 0 ? (
                    <table className="summary-table">
                        <thead>
                            <tr>
                                <th>üè≠ ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£</th>
                                <th>üìÑ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÑ‡∏ü‡∏•‡πå</th>
                            </tr>
                        </thead>
                        <tbody>
                            {Object.entries(machineCount).map(([machine, count]) => (
                                <tr key={machine}>
                                    <td>{machine}</td>
                                    <td>{count} ‡πÑ‡∏ü‡∏•‡πå</td>
                                </tr>
                            ))}
                        </tbody>
                    </table>
                ) : (
                    <p>‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ PM ‡∏ï‡πà‡∏≠‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£</p>
                )}
            </div>
        </div>
    );
}
